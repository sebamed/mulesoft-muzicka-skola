<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <http:listener-config name="muzicka-skola-http-listener-cfg" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration" />
    <apikit:config name="muzicka-skola-router-cfg" raml="muzicka-skola.raml" consoleEnabled="false" consolePath="console" keepRamlBaseUri="false" doc:name="Router" />
    <db:mysql-config name="MySQL_Configuration" url="jdbc:mysql://localhost:3306/muzicka_skola?user=root&amp;password=mysqlroot&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false" doc:name="MySQL Configuration"/>
    <file:connector name="File" outputPattern="/home/sebamed/AnypointStudio/workspace/muzicka-skola/files" autoDelete="true" outputAppend="true" streaming="true" validateConnections="true" doc:name="File"/>
    <flow name="muzicka-skola-main">
        <http:listener config-ref="muzicka-skola-http-listener-cfg" path="/api/*" doc:name="HTTP" />
        <apikit:router config-ref="muzicka-skola-router-cfg" doc:name="APIkit Router" />
    </flow>
    <flow name="muzicka-skola-console">
        <http:listener config-ref="muzicka-skola-http-listener-cfg" path="/" doc:name="HTTP" />
        <apikit:console config-ref="muzicka-skola-router-cfg" doc:name="APIkit Console" />
    </flow>
    <flow name="put:/profesori/{ProfesorID}:application/json:muzicka-skola-router-cfg">
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="jsonData" value="#[payload]" doc:name="Variable"/>
        <db:update config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[update muzicka_skola.Profesor set ProfesorIme = #[payload.ProfesorIme], ProfesorPrezime = #[payload.ProfesorPrezime], Active = #[payload.Active == true ? 1 : 0] where ProfesorID = #[message.inboundProperties.'http.uri.params'.ProfesorID]]]></db:parameterized-query>
        </db:update>
        <choice doc:name="Choice">
            <when expression="#[payload == 0]">
                <db:insert config-ref="MySQL_Configuration" doc:name="Database - Does not exist - Insert">
                    <db:parameterized-query><![CDATA[insert into muzicka_skola.Profesor(ProfesorIme, ProfesorPrezime, Active) values (#[jsonData.ProfesorIme], #[jsonData.ProfesorPrezime], 1)]]></db:parameterized-query>
                </db:insert>
                <logger message="[INSERT]: Profesor - #[jsonData.ProfesorIme] #[jsonData.ProfesorPrezime]" level="INFO" doc:name="Logger"/>
                <set-property propertyName="http.status" value="201" doc:name="Property"/>
                <set-payload value="{
	&quot;code&quot;:&quot;201&quot;,
	&quot;status&quot;:&quot;Profesor created.&quot;
}" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <logger message="[UPDATE]: Profesor - #[jsonData.ProfesorIme] #[jsonData.ProfesorPrezime]" level="INFO" doc:name="Logger"/>
                <set-property propertyName="http.status" value="200" doc:name="Property"/>
                <set-payload value="{
	&quot;code&quot;:&quot;200&quot;,
	&quot;status&quot;:&quot;Profesor updated!&quot;
}" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="put:/ucenici/{UcenikID}:application/json:muzicka-skola-router-cfg">
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="jsonData" value="#[payload]" doc:name="Variable"/>
        <db:update config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[update muzicka_skola.Ucenik set UcenikIme = #[payload.UcenikIme], UcenikPrezime = #[payload.UcenikPrezime], Active = #[payload.Active == true ? 1 : 0], UcenikJMBG = #[payload.UcenikJMBG], UcenikDatumRodjenja = #[payload.UcenikDatumRodjenja], ProfesorID = #[payload.ProfesorID] where UcenikID = #[message.inboundProperties.'http.uri.params'.UcenikID]]]></db:parameterized-query>
        </db:update>
        <choice doc:name="Choice">
            <when expression="#[payload == 0]">
                <db:insert config-ref="MySQL_Configuration" doc:name="Database - Does not exist - Insert">
                    <db:parameterized-query><![CDATA[insert into muzicka_skola.Ucenik(UcenikIme, UcenikPrezime, Active, UcenikJMBG, UcenikDatumRodjenja, ProfesorID) values (#[jsonData.UcenikIme], #[jsonData.UcenikPrezime], 1, #[jsonData.UcenikJMBG], #[jsonData.UcenikDatumRodjenja], #[jsonData.ProfesorID])]]></db:parameterized-query>
                </db:insert>
                <logger message="[INSERT]: Ucenik - #[jsonData.UcenikIme] #[jsonData.UcenikPrezime]" level="INFO" doc:name="Logger"/>
                <set-property propertyName="http.status" value="201" doc:name="Property"/>
                <set-payload value="{
	&quot;code&quot;:&quot;201&quot;,
	&quot;status&quot;:&quot;Ucenik created.&quot;
}" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <logger message="[UPDATE]: Ucenik - #[jsonData.UcenikIme] #[jsonData.UcenikPrezime]" level="INFO" doc:name="Logger"/>
                <set-property propertyName="http.status" value="200" doc:name="Property"/>
                <set-payload value="{
	&quot;code&quot;:&quot;200&quot;,
	&quot;status&quot;:&quot;Ucenik updated!&quot;
}" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="delete:/profesori/{ProfesorID}:muzicka-skola-router-cfg">
        <db:select config-ref="MySQL_Configuration" doc:name="Database - Find">
            <db:parameterized-query><![CDATA[select * from muzicka_skola.Profesor where ProfesorID = #[message.inboundProperties.'http.uri.params'.ProfesorID]]]></db:parameterized-query>
        </db:select>
        <choice doc:name="Choice">
            <when expression="#[payload != empty]">
                <db:delete config-ref="MySQL_Configuration" doc:name="Database - Delete">
                    <db:parameterized-query><![CDATA[delete from muzicka_skola.Profesor where ProfesorID = #[message.inboundProperties.'http.uri.params'.ProfesorID]]]></db:parameterized-query>
                </db:delete>
                <set-property propertyName="http.status" value="200" doc:name="Property"/>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
                <set-payload value="{
	&quot;code&quot;:&quot;404&quot;,
	&quot;status&quot;:&quot;Profesor not found.&quot;
}" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="delete:/ucenici/{UcenikID}:muzicka-skola-router-cfg">
        <db:select config-ref="MySQL_Configuration" doc:name="Database - Find">
            <db:parameterized-query><![CDATA[select * from muzicka_skola.Ucenik where UcenikID = #[message.inboundProperties.'http.uri.params'.UcenikID]]]></db:parameterized-query>
        </db:select>
        <choice doc:name="Choice">
            <when expression="#[payload != empty]">
                <db:delete config-ref="MySQL_Configuration" doc:name="Copy_of_Database - Delete">
                    <db:parameterized-query><![CDATA[delete from muzicka_skola.Ucenik where UcenikID = #[message.inboundProperties.'http.uri.params'.UcenikID]]]></db:parameterized-query>
                </db:delete>
                <set-property propertyName="http.status" value="200" doc:name="Property"/>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
                <set-payload value="{  &quot;code&quot;:&quot;404&quot;,  &quot;status&quot;:&quot;Ucenik not found.&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="get:/profesori:muzicka-skola-router-cfg">
        <choice doc:name="Choice - Active">
            <when expression="#[message.inboundProperties.active != empty]">
                <db:select config-ref="MySQL_Configuration" doc:name="Database - Active prop sent">
                    <db:parameterized-query><![CDATA[select * from muzicka_skola.Profesor where Active = #[message.inboundProperties.active == true ? 1 : 0]]]></db:parameterized-query>
                </db:select>
            </when>
            <otherwise>
                <db:select config-ref="MySQL_Configuration" doc:name="Database - Active prop NOT sent">
                    <db:parameterized-query><![CDATA[select * from muzicka_skola.Profesor]]></db:parameterized-query>
                </db:select>
            </otherwise>
        </choice>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    <flow name="get:/ucenici:muzicka-skola-router-cfg">
        <choice doc:name="Choice - Active">
            <when expression="#[message.inboundProperties.active != empty]">
                <db:select config-ref="MySQL_Configuration" doc:name="Database - Active prop sent">
                    <db:parameterized-query><![CDATA[select * from muzicka_skola.Ucenik where Active = #[message.inboundProperties.active == true ? 1 : 0]]]></db:parameterized-query>
                </db:select>
            </when>
            <otherwise>
                <db:select config-ref="MySQL_Configuration" doc:name="Database - Active prop NOT sent">
                    <db:parameterized-query><![CDATA[select * from muzicka_skola.Ucenik]]></db:parameterized-query>
                </db:select>
            </otherwise>
        </choice>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    <flow name="get:/profesori/{ProfesorID}:muzicka-skola-router-cfg">
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[select * from muzicka_skola.Profesor where ProfesorID = #[message.inboundProperties.'http.uri.params'.ProfesorID]]]></db:parameterized-query>
        </db:select>
        <choice doc:name="Choice">
            <when expression="#[payload.isEmpty()]">
                <set-property propertyName="http.status" value="404" doc:name="Propery"/>
                <set-payload value="{
	&quot;code&quot;: &quot;404&quot;,
	&quot;status&quot;: &quot;Profesor sa tim ID-em ne postoji!&quot;
}" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <file:outbound-endpoint path="/home/sebamed/AnypointStudio/workspace/muzicka-skola/files" outputPattern="get_profesor.txt" connector-ref="File" responseTimeout="10000" doc:name="File"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="get:/ucenici/{UcenikID}:muzicka-skola-router-cfg">
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[select * from muzicka_skola.Ucenik where UcenikID = #[message.inboundProperties.'http.uri.params'.UcenikID]]]></db:parameterized-query>
        </db:select>
        <choice doc:name="Choice">
            <when expression="#[payload.isEmpty()]">
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
                <set-payload value="{
	&quot;code&quot;: &quot;404&quot;,
	&quot;status&quot;: &quot;Ucenik sa tim ID-em ne postoji!&quot;
}" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <file:outbound-endpoint path="/home/sebamed/AnypointStudio/workspace/muzicka-skola/files" outputPattern="get_ucenik.txt" connector-ref="File" responseTimeout="10000" doc:name="File"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="post:/profesori:application/json:muzicka-skola-router-cfg">
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <db:insert config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[insert into muzicka_skola.Profesor(ProfesorIme, ProfesorPrezime, Active) values (#[payload.ProfesorIme], #[payload.ProfesorPrezime], 1)]]></db:parameterized-query>
        </db:insert>
        <logger message="[INSERT]: Profesor - #[payload.ProfesorIme] #[payload.ProfesorPrezime]" level="INFO" doc:name="Logger"/>
        <set-property propertyName="http.status" value="201" doc:name="Property"/>
        <set-payload value="{
	&quot;code&quot;:&quot;201&quot;,
	&quot;status&quot;:&quot;Profesor created.&quot;
}" doc:name="Set Payload"/>
    </flow>
    <flow name="post:/ucenici:application/json:muzicka-skola-router-cfg">
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="jsonData" value="#[payload]" doc:name="Variable"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Database - Check if exists">
            <db:parameterized-query><![CDATA[select * from muzicka_skola.Ucenik where UcenikJMBG = #[payload.UcenikJMBG]]]></db:parameterized-query>
        </db:select>
        <choice doc:name="Choice">
            <when expression="#[payload != empty]">
                <set-property propertyName="http.status" value="409" doc:name="Property"/>
                <set-payload value="{
	&quot;code&quot;: &quot;409&quot;,
	&quot;status&quot;:&quot;Ucenik with that JMBG already exists!&quot;
}" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <db:insert config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[insert into muzicka_skola.Ucenik (UcenikIme, UcenikPrezime, UcenikJMBG, UcenikDatumRodjenja, ProfesorID, Active) values
(#[jsonData.UcenikIme], #[jsonData.UcenikPrezime], #[jsonData.UcenikJMBG], #[jsonData.UcenikDatumRodjenja], #[jsonData.ProfesorID], 1)]]></db:parameterized-query>
                </db:insert>
                <logger message="[INSERT]: Ucenik - #[payload.UcenikIme] #[payload.UcenikPrezime]" level="INFO" doc:name="Logger"/>
                <set-property propertyName="http.status" value="201" doc:name="Property"/>
                <set-payload value="{  &quot;code&quot;:&quot;201&quot;,  &quot;status&quot;:&quot;Ucenik created&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
</mule>
